install.packages('mlbench')
data(BreastCancer, package="mlbench")

head(BreastCancer)

str(BreastCancer)

#Seleccionando Filas completas
bc <- BreastCancer[complete.cases(BreastCancer), ] 
head(bc)

#Removiendo columna ID
bc <- bc[,-1]
head(bc)

# Convirtiendo a numericas
for(i in 1:9) {
  bc[, i] <- as.numeric(as.character(bc[, i]))
}


# Transformando Target a 1 y 0
bc$Class <- ifelse(bc$Class == "malignant", 1, 0)
str(bc)
bc$Class <- factor(bc$Class, levels = c(0, 1))
str(bc)
library(caret)

'%ni%' <- Negate('%in%')  # Creando funcion Not In
options(scipen=999)  # Desactivando la notaciÃ³n cientifica.
set.seed(100)
trainDataIndex <- createDataPartition(bc$Class, p=0.7, list = F)
trainData <- bc[trainDataIndex, ]
testData <- bc[-trainDataIndex, ]

# Class distribution of train data
table(trainData$Class)


# Trabajando con el imbalanced Dataset
# Down Sample
set.seed(100)
down_train <- downSample(x = trainData[, colnames(trainData) %ni% "Class"],
                         y = trainData$Class)

table(down_train$Class)


# Up Sample 
set.seed(100)
up_train <- upSample(x = trainData[, colnames(trainData) %ni% "Class"],
                     y = trainData$Class)

table(up_train$Class)

# Build Logistic Model
logitmod <- glm(Class ~ Cl.thickness + Cell.size + Cell.shape, family = "binomial", data=down_train)

summary(logitmod)

pred <- predict(logitmod, newdata = testData, type = "response")
pred

# Recode factors
y_pred_num <- ifelse(pred > 0.5, 1, 0)
y_pred <- factor(y_pred_num, levels=c(0, 1))
y_act <- testData$Class


MC  <- table(y_act,y_pred)
MC

# Accuracy
mean(y_pred == y_act)